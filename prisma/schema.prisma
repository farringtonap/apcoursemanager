// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

///
/// Model: APClass
/// Purpose: Represents an AP class with its details and relationships.
/// Fields:
/// - name: Name of the course.
/// - description: Description of the course.
/// - resources: Optional string containing URLs or info about resources.
/// - offered: Boolean flag indicating if the course is offered next year.
/// Relationships:
/// - One-to-one with Users (each AP class is assigned one User).
/// - Many-to-one with Subject (each AP class belongs to one Subject).
/// - Many-to-many with PreRequisite (an AP class can require multiple prerequisites).
/// - Many-to-many with GradeLevel (indicating which grades are eligible).
///
model APClass {
  id             Int           @id @default(autoincrement())
  name           String        @unique
  description    String
  resources      String?
  offered        Boolean
  subjectId      Int
  teacherEmail   String

  // Relations:
  subject        Subject       @relation(fields: [subjectId], references: [id])
  teacher        User          @relation(fields: [teacherEmail], references: [email])
  prerequisites  PreRequisite[] @relation("APClassPrerequisites")
  gradeLevels    GradeLevel[]  @relation("APClassGradeLevels")

  @@map("ap_classes")
}


///
/// Model: Subject
/// Purpose: Represents the academic subject for AP classes.
/// Fields:
/// - name: Name of the subject (e.g., Math, Science).
/// Relationships:
/// - One-to-many with APClass (one subject can have multiple AP classes).
/// - One-to-many with Users (subjects can be taught by different "Users" (teachers)).
/// - One-to-many with PreRequisite (each subject may have multiple prerequisite defined).
///
model Subject {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  
  apClasses    APClass[]
  prerequisite PreRequisite[]

  @@map("subjects")
}

///
/// Model: PreRequisite
/// Purpose: Represents a prerequisite requirement for an AP class.
/// Fields:
/// - name: Name of the prerequisite.
/// Relationships:
/// - Many-to-one with Subject (each subject can have multiple prerequisites).
/// - Many-to-many with APClass (a prerequisite can be required by multiple AP classes).
/// - Many-to-many with GradeLevel (defines applicable grade levels for the prerequisite).
///
model PreRequisite {
  id          Int         @id @default(autoincrement())
  name        String
  subjectId   Int         

  // Relations:
  subject     Subject     @relation(fields: [subjectId], references: [id])
  apClasses   APClass[]   @relation("APClassPrerequisites")
  gradeLevels GradeLevel[]@relation("PreRequisiteGradeLevels")

  @@map("prerequisites")
}

///
/// Model: GradeLevel
/// Purpose: Represents a school grade level (e.g., 9, 10, 11, 12) for which an AP class or prerequisite is open.
/// Fields:
/// - level: The numerical grade level.
/// Relationships:
/// - Many-to-many with APClass and PreRequisite.
///
model GradeLevel {
  id            Int          @id @default(autoincrement())
  level         Int          @unique

  // Relations:
  apClasses     APClass[]    @relation("APClassGradeLevels")
  preRequisites PreRequisite[] @relation("PreRequisiteGradeLevels")

  @@map("grade_levels")
}


// User and Role

enum Role {
  TEACHER
  ADMIN
}

model User {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
  firstName String
  lastName String
  role     Role   @default(TEACHER)
  
  apClass  APClass[]

}